{
    "sourceFile": "components/cta/Button.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744399843915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744399860515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,16 +42,17 @@\n     },\n   }\n );\n \n-export interface ButtonProps\n-  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n-    VariantProps<typeof buttonVariants> {\n+export interface ButtonProps extends VariantProps<typeof buttonVariants> {\n   isLoading?: boolean;\n   href?: string;\n   external?: boolean;\n   leftIcon?: ReactNode;\n   rightIcon?: ReactNode;\n+  className?: string;\n+  children?: React.ReactNode;\n+  [key: string]: any;\n }\n \n const Button = ({\n   className,\n@@ -66,11 +67,10 @@\n   rightIcon,\n   children,\n   ...props\n }: ButtonProps) => {\n-  const Comp = href ? (external ? 'a' : Link) : 'button';\n-  const externalProps = external ? { target: '_blank', rel: 'noopener noreferrer' } : {};\n   const iconOnly = !children && (leftIcon || rightIcon);\n+  const iconOnlyClass = iconOnly ? 'aspect-square p-0 flex items-center justify-center' : '';\n   \n   const content = (\n     <>\n       {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n@@ -79,29 +79,50 @@\n       {!isLoading && rightIcon}\n     </>\n   );\n \n-  // For a button with just an icon, we want it to be square\n-  const iconOnlyClass = iconOnly ? 'aspect-square p-0 flex items-center justify-center' : '';\n+  const buttonClasses = cn(\n+    buttonVariants({\n+      variant,\n+      size,\n+      withIcon: Boolean(leftIcon || rightIcon || isLoading),\n+      fullWidth,\n+    }),\n+    iconOnlyClass,\n+    className\n+  );\n+\n+  if (href) {\n+    const externalProps = external ? { target: '_blank', rel: 'noopener noreferrer' } : {};\n+    \n+    return external ? (\n+      <a \n+        href={href} \n+        className={buttonClasses}\n+        {...externalProps}\n+        {...props}\n+      >\n+        {content}\n+      </a>\n+    ) : (\n+      <Link \n+        href={href} \n+        className={buttonClasses}\n+        {...props}\n+      >\n+        {content}\n+      </Link>\n+    );\n+  }\n   \n   return (\n-    <Comp\n-      className={cn(\n-        buttonVariants({\n-          variant,\n-          size,\n-          withIcon: Boolean(leftIcon || rightIcon || isLoading),\n-          fullWidth,\n-        }),\n-        iconOnlyClass,\n-        className\n-      )}\n-      href={href || ''}\n-      {...externalProps}\n+    <button\n+      className={buttonClasses}\n+      disabled={isLoading}\n       {...props}\n     >\n       {content}\n-    </Comp>\n+    </button>\n   );\n };\n \n export { Button, buttonVariants };\n"
                }
            ],
            "date": 1744399843915,
            "name": "Commit-0",
            "content": "'use client';\n\nimport { ReactNode } from 'react';\nimport Link from 'next/link';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-all focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-md hover:shadow-lg hover:scale-105',\n        secondary: 'bg-white text-blue-600 border-2 border-blue-600 hover:bg-blue-50 dark:bg-gray-800 dark:text-blue-400 dark:border-blue-500 dark:hover:bg-gray-700',\n        outline: 'border border-gray-300 bg-transparent hover:bg-gray-100 dark:border-gray-600 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300',\n        linkedin: 'bg-[#0A66C2] text-white hover:bg-[#004182]',\n        calendly: 'bg-[#00A2FF] text-white hover:bg-[#0082CC]',\n        sociail: 'bg-blue-600 text-white hover:bg-blue-700',\n        ghost: 'bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300',\n      },\n      size: {\n        sm: 'h-9 px-3 rounded-md',\n        md: 'h-11 px-6 rounded-md',\n        lg: 'h-12 px-8 rounded-md',\n        xl: 'h-14 px-10 text-base rounded-md',\n      },\n      withIcon: {\n        true: 'gap-2',\n        false: '',\n      },\n      fullWidth: {\n        true: 'w-full',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md',\n      withIcon: false,\n      fullWidth: false,\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  isLoading?: boolean;\n  href?: string;\n  external?: boolean;\n  leftIcon?: ReactNode;\n  rightIcon?: ReactNode;\n}\n\nconst Button = ({\n  className,\n  variant,\n  size,\n  withIcon,\n  fullWidth,\n  isLoading = false,\n  href,\n  external = false,\n  leftIcon,\n  rightIcon,\n  children,\n  ...props\n}: ButtonProps) => {\n  const Comp = href ? (external ? 'a' : Link) : 'button';\n  const externalProps = external ? { target: '_blank', rel: 'noopener noreferrer' } : {};\n  const iconOnly = !children && (leftIcon || rightIcon);\n  \n  const content = (\n    <>\n      {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n      {!isLoading && leftIcon}\n      {children}\n      {!isLoading && rightIcon}\n    </>\n  );\n\n  // For a button with just an icon, we want it to be square\n  const iconOnlyClass = iconOnly ? 'aspect-square p-0 flex items-center justify-center' : '';\n  \n  return (\n    <Comp\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          withIcon: Boolean(leftIcon || rightIcon || isLoading),\n          fullWidth,\n        }),\n        iconOnlyClass,\n        className\n      )}\n      href={href || ''}\n      {...externalProps}\n      {...props}\n    >\n      {content}\n    </Comp>\n  );\n};\n\nexport { Button, buttonVariants };\n"
        }
    ]
}
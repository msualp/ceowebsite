{
    "sourceFile": "docs/tmp/New-CTA-Components-Code.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744399214720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744399214720,
            "name": "Commit-0",
            "content": "// components/cta/Button.tsx\n'use client';\n\nimport { ReactNode } from 'react';\nimport Link from 'next/link';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-all focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-md hover:shadow-lg hover:scale-105',\n        secondary: 'bg-white text-blue-600 border-2 border-blue-600 hover:bg-blue-50 dark:bg-gray-800 dark:text-blue-400 dark:border-blue-500 dark:hover:bg-gray-700',\n        outline: 'border border-gray-300 bg-transparent hover:bg-gray-100 dark:border-gray-600 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300',\n        linkedin: 'bg-[#0A66C2] text-white hover:bg-[#004182]',\n        calendly: 'bg-[#00A2FF] text-white hover:bg-[#0082CC]',\n        sociail: 'bg-blue-600 text-white hover:bg-blue-700',\n        ghost: 'bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300',\n      },\n      size: {\n        sm: 'h-9 px-3 rounded-md',\n        md: 'h-11 px-6 rounded-md',\n        lg: 'h-12 px-8 rounded-md',\n        xl: 'h-14 px-10 text-base rounded-md',\n      },\n      withIcon: {\n        true: 'gap-2',\n        false: '',\n      },\n      fullWidth: {\n        true: 'w-full',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md',\n      withIcon: false,\n      fullWidth: false,\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  isLoading?: boolean;\n  href?: string;\n  external?: boolean;\n  leftIcon?: ReactNode;\n  rightIcon?: ReactNode;\n}\n\nconst Button = ({\n  className,\n  variant,\n  size,\n  withIcon,\n  fullWidth,\n  isLoading = false,\n  href,\n  external = false,\n  leftIcon,\n  rightIcon,\n  children,\n  ...props\n}: ButtonProps) => {\n  const Comp = href ? (external ? 'a' : Link) : 'button';\n  const externalProps = external ? { target: '_blank', rel: 'noopener noreferrer' } : {};\n  const iconOnly = !children && (leftIcon || rightIcon);\n  \n  const content = (\n    <>\n      {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n      {!isLoading && leftIcon}\n      {children}\n      {!isLoading && rightIcon}\n    </>\n  );\n\n  // For a button with just an icon, we want it to be square\n  const iconOnlyClass = iconOnly ? 'aspect-square p-0 flex items-center justify-center' : '';\n  \n  return (\n    <Comp\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          withIcon: Boolean(leftIcon || rightIcon || isLoading),\n          fullWidth,\n        }),\n        iconOnlyClass,\n        className\n      )}\n      href={href || ''}\n      {...externalProps}\n      {...props}\n    >\n      {content}\n    </Comp>\n  );\n};\n\nexport { Button, buttonVariants };\n\n// components/cta/CTAGroup.tsx\nimport { ReactNode } from 'react';\nimport { Button } from './Button';\nimport { CalendarDays, Mail, Linkedin, ArrowRight } from 'lucide-react';\n\ninterface CTAGroupProps {\n  className?: string;\n  variant?: 'hero' | 'inline' | 'footer' | 'compact';\n  primaryCTA?: 'earlyAccess' | 'calendly' | 'linkedin' | 'email' | 'custom';\n  primaryLabel?: string;\n  primaryHref?: string;\n  primaryIcon?: ReactNode;\n  secondaryCTA?: 'earlyAccess' | 'calendly' | 'linkedin' | 'email' | 'custom' | 'none';\n  secondaryLabel?: string;\n  secondaryHref?: string;\n  secondaryIcon?: ReactNode;\n  showAll?: boolean;\n  direction?: 'row' | 'column';\n}\n\nexport function CTAGroup({\n  className = '',\n  variant = 'inline',\n  primaryCTA = 'earlyAccess',\n  primaryLabel,\n  primaryHref,\n  primaryIcon,\n  secondaryCTA = 'calendly',\n  secondaryLabel,\n  secondaryHref,\n  secondaryIcon,\n  showAll = false,\n  direction = 'row',\n}: CTAGroupProps) {\n  // Define CTA configurations\n  const ctaConfigs = {\n    earlyAccess: {\n      label: 'Join Early Access',\n      href: '/early-access',\n      icon: <ArrowRight className=\"w-4 h-4\" />,\n      variant: 'primary' as const,\n    },\n    calendly: {\n      label: 'Schedule a Meeting',\n      href: 'https://calendly.com/msualp-main',\n      icon: <CalendarDays className=\"w-4 h-4\" />,\n      variant: 'calendly' as const,\n      external: true,\n    },\n    linkedin: {\n      label: 'Connect on LinkedIn',\n      href: 'https://www.linkedin.com/in/sualp/',\n      icon: <Linkedin className=\"w-4 h-4\" />,\n      variant: 'linkedin' as const,\n      external: true,\n    },\n    email: {\n      label: 'Email Me',\n      href: 'mailto:msualp@sociail.com',\n      icon: <Mail className=\"w-4 h-4\" />,\n      variant: 'outline' as const,\n      external: true,\n    },\n    custom: {\n      label: '',\n      href: '',\n      icon: null,\n      variant: 'primary' as const,\n    },\n    none: {\n      label: '',\n      href: '',\n      icon: null,\n      variant: 'primary' as const,\n    },\n  };\n\n  // Set up the primary CTA\n  const primary = {\n    ...ctaConfigs[primaryCTA],\n    label: primaryLabel || ctaConfigs[primaryCTA].label,\n    href: primaryHref || ctaConfigs[primaryCTA].href,\n    icon: primaryIcon || ctaConfigs[primaryCTA].icon,\n  };\n\n  // Set up the secondary CTA\n  const secondary = {\n    ...ctaConfigs[secondaryCTA],\n    label: secondaryLabel || ctaConfigs[secondaryCTA].label,\n    href: secondaryHref || ctaConfigs[secondaryCTA].href,\n    icon: secondaryIcon || ctaConfigs[secondaryCTA].icon,\n  };\n\n  // Define variant-specific classes and sizes\n  const variantStyles = {\n    hero: {\n      container: 'gap-4',\n      primarySize: 'xl' as const,\n      secondarySize: 'xl' as const,\n      secondaryVariant: 'secondary' as const,\n    },\n    inline: {\n      container: 'gap-3',\n      primarySize: 'md' as const,\n      secondarySize: 'md' as const,\n      secondaryVariant: 'outline' as const,\n    },\n    footer: {\n      container: 'gap-2',\n      primarySize: 'md' as const,\n      secondarySize: 'md' as const,\n      secondaryVariant: ctaConfigs[secondaryCTA].variant,\n    },\n    compact: {\n      container: 'gap-2',\n      primarySize: 'sm' as const,\n      secondarySize: 'sm' as const,\n      secondaryVariant: 'ghost' as const,\n    },\n  };\n\n  const currentStyles = variantStyles[variant];\n  const directionClass = direction === 'column' ? 'flex-col' : 'flex-row';\n\n  if (showAll) {\n    // Render all CTAs\n    return (\n      <div className={`flex flex-wrap gap-3 ${className}`}>\n        <Button\n          variant=\"primary\"\n          size={currentStyles.primarySize}\n          href={ctaConfigs.earlyAccess.href}\n          rightIcon={ctaConfigs.earlyAccess.icon}\n        >\n          {ctaConfigs.earlyAccess.label}\n        </Button>\n        <Button\n          variant=\"calendly\"\n          size={currentStyles.primarySize}\n          href={ctaConfigs.calendly.href}\n          external={true}\n          rightIcon={ctaConfigs.calendly.icon}\n        >\n          {ctaConfigs.calendly.label}\n        </Button>\n        <Button\n          variant=\"linkedin\"\n          size={currentStyles.primarySize}\n          href={ctaConfigs.linkedin.href}\n          external={true}\n          rightIcon={ctaConfigs.linkedin.icon}\n        >\n          {ctaConfigs.linkedin.label}\n        </Button>\n        <Button\n          variant=\"outline\"\n          size={currentStyles.primarySize}\n          href={ctaConfigs.email.href}\n          external={true}\n          rightIcon={ctaConfigs.email.icon}\n        >\n          {ctaConfigs.email.label}\n        </Button>\n      </div>\n    );\n  }\n\n  // Render primary and secondary CTAs\n  return (\n    <div className={`flex ${directionClass} ${currentStyles.container} ${className}`}>\n      {primaryCTA !== 'none' && (\n        <Button\n          variant={primary.variant}\n          size={currentStyles.primarySize}\n          href={primary.href}\n          external={primary.external}\n          rightIcon={primary.icon}\n        >\n          {primary.label}\n        </Button>\n      )}\n      {secondaryCTA !== 'none' && (\n        <Button\n          variant={currentStyles.secondaryVariant}\n          size={currentStyles.secondarySize}\n          href={secondary.href}\n          external={secondary.external}\n          rightIcon={secondary.icon}\n        >\n          {secondary.label}\n        </Button>\n      )}\n    </div>\n  );\n}\n\n// components/cta/EarlyAccessCTA.tsx\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from './Button';\nimport { ArrowRight } from 'lucide-react';\n\ninterface EarlyAccessCTAProps {\n  className?: string;\n  variant?: 'default' | 'prominent' | 'minimal';\n  backgroundColor?: string;\n  showCounter?: boolean;\n}\n\nexport function EarlyAccessCTA({\n  className = '',\n  variant = 'default',\n  backgroundColor = 'bg-blue-50 dark:bg-blue-900/20',\n  showCounter = false,\n}: EarlyAccessCTAProps) {\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  \n  const remainingSpots = 247; // This would be fetched from an API in a real implementation\n  \n  const validateEmail = (email: string) => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(email);\n  };\n  \n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n    if (emailError) {\n      setEmailError('');\n    }\n  };\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email.trim()) {\n      setEmailError('Email is required');\n      return;\n    }\n    \n    if (!validateEmail(email)) {\n      setEmailError('Please enter a valid email address');\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      setIsSubmitting(false);\n      setIsSubmitted(true);\n      setEmail('');\n    }, 1000);\n  };\n\n  if (variant === 'minimal') {\n    return (\n      <div className={`${className}`}>\n        <Button \n          variant=\"primary\" \n          href=\"/early-access\" \n          rightIcon={<ArrowRight className=\"w-4 h-4\" />}\n        >\n          Join Early Access\n        </Button>\n      </div>\n    );\n  }\n\n  if (variant === 'prominent') {\n    return (\n      <div className={`${backgroundColor} p-8 rounded-xl shadow-md ${className}`}>\n        <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-6\">\n          <div>\n            <h3 className=\"text-2xl font-bold mb-2\">Join the Sociail Beta Program</h3>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-0\">\n              Be among the first to experience the future of AI collaboration.\n            </p>\n            {showCounter && (\n              <div className=\"mt-2 flex items-center\">\n                <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800/30 dark:text-green-300\">\n                  <span className=\"relative flex h-2 w-2 mr-1\">\n                    <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75\"></span>\n                    <span className=\"relative inline-flex rounded-full h-2 w-2 bg-green-500\"></span>\n                  </span>\n                  {remainingSpots} spots remaining\n                </span>\n              </div>\n            )}\n          </div>\n          \n          {isSubmitted ? (\n            <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200 rounded-lg p-4 max-w-md\">\n              <p className=\"font-medium\">Thanks for joining!</p>\n              <p className=\"text-sm mt-1\">We'll be in touch soon with details about early access.</p>\n            </div>\n          ) : (\n            <form onSubmit={handleSubmit} className=\"flex flex-col sm:flex-row gap-3 max-w-md w-full\">\n              <div className=\"flex-grow\">\n                <input\n                  type=\"email\"\n                  placeholder=\"Your Email\"\n                  value={email}\n                  onChange={handleEmailChange}\n                  className={`w-full px-4 py-3 rounded-md border ${\n                    emailError ? 'border-red-500 dark:border-red-700' : 'border-gray-300 dark:border-gray-700'\n                  } dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition`}\n                  disabled={isSubmitting}\n                />\n                {emailError && <p className=\"text-red-500 text-sm mt-1\">{emailError}</p>}\n              </div>\n              <Button\n                type=\"submit\"\n                variant=\"primary\"\n                isLoading={isSubmitting}\n                rightIcon={!isSubmitting ? <ArrowRight className=\"w-4 h-4\" /> : undefined}\n              >\n                Get Access\n              </Button>\n            </form>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Default variant\n  return (\n    <div className={`${backgroundColor} p-6 rounded-lg ${className}`}>\n      <div className=\"flex items-center gap-3 mb-2\">\n        <span className=\"relative flex h-3 w-3\">\n          <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75\"></span>\n          <span className=\"relative inline-flex rounded-full h-3 w-3 bg-green-500\"></span>\n        </span>\n        <span className=\"font-semibold text-blue-600 dark:text-blue-400\">Early Access Program</span>\n      </div>\n      \n      <h3 className=\"text-xl font-bold mb-3\">Be the first to experience Sociail</h3>\n      \n      {isSubmitted ? (\n        <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200 rounded-lg p-4\">\n          <p className=\"font-medium\">Thanks for joining!</p>\n          <p className=\"text-sm mt-1\">We'll be in touch soon with details about early access.</p>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"flex flex-col sm:flex-row gap-3\">\n          <div className=\"flex-grow\">\n            <input\n              type=\"email\"\n              placeholder=\"Your Email\"\n              value={email}\n              onChange={handleEmailChange}\n              className={`w-full px-4 py-3 rounded-md border ${\n                emailError ? 'border-red-500 dark:border-red-700' : 'border-gray-300 dark:border-gray-700'\n              } dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition`}\n              disabled={isSubmitting}\n            />\n            {emailError && <p className=\"text-red-500 text-sm mt-1\">{emailError}</p>}\n          </div>\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            isLoading={isSubmitting}\n            rightIcon={!isSubmitting ? <ArrowRight className=\"w-4 h-4\" /> : undefined}\n          >\n            Join Now\n          </Button>\n        </form>\n      )}\n      \n      {showCounter && !isSubmitted && (\n        <div className=\"mt-3 text-sm text-gray-500 dark:text-gray-400\">\n          <span className=\"font-medium text-green-600 dark:text-green-400\">{remainingSpots} spots</span> remaining in our limited beta program\n        </div>\n      )}\n    </div>\n  );\n}\n\n// components/cta/FloatingCTA.tsx\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from './Button';\nimport { X, Plus, CalendarDays, Mail, Linkedin, Sparkles } from 'lucide-react';\nimport { AnimatePresence, motion } from 'framer-motion';\n\ninterface FloatingCTAProps {\n  primaryCTA?: 'earlyAccess' | 'calendly' | 'linkedin' | 'email';\n}\n\nexport function FloatingCTA({ primaryCTA = 'earlyAccess' }: FloatingCTAProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  const toggleOpen = () => setIsOpen(!isOpen);\n  \n  const ctaConfigs = {\n    earlyAccess: {\n      icon: <Sparkles className=\"w-5 h-5\" />,\n      label: 'Join Early Access',\n      href: '/early-access',\n      bgColor: 'bg-gradient-to-r from-blue-600 to-purple-600',\n    },\n    calendly: {\n      icon: <CalendarDays className=\"w-5 h-5\" />,\n      label: 'Schedule Meeting',\n      href: 'https://calendly.com/msualp-main',\n      bgColor: 'bg-[#00A2FF]',\n    },\n    linkedin: {\n      icon: <Linkedin className=\"w-5 h-5\" />,\n      label: 'Connect on LinkedIn',\n      href: 'https://www.linkedin.com/in/sualp/',\n      bgColor: 'bg-[#0A66C2]',\n    },\n    email: {\n      icon: <Mail className=\"w-5 h-5\" />,\n      label: 'Email Me',\n      href: 'mailto:msualp@sociail.com',\n      bgColor: 'bg-gray-700 dark:bg-gray-600',\n    },\n  };\n  \n  const primaryConfig = ctaConfigs[primaryCTA];\n  \n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div \n            className=\"absolute bottom-16 right-0 space-y-2\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 20 }}\n            transition={{ duration: 0.2 }}\n          >\n            {Object.entries(ctaConfigs)\n              .filter(([key]) => key !== primaryCTA)\n              .map(([key, config]) => (\n                <motion.div \n                  key={key}\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 10 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"flex items-center gap-2 justify-end\"\n                >\n                  <span className=\"bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 text-sm py-1 px-3 rounded-full shadow-md\">\n                    {config.label}\n                  </span>\n                  <a \n                    href={config.href}\n                    target={key !== 'earlyAccess' ? '_blank' : undefined}\n                    rel={key !== 'earlyAccess' ? 'noopener noreferrer' : undefined}\n                    className={`${config.bgColor} text-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all hover:scale-105 flex items-center justify-center`}\n                  >\n                    {config.icon}\n                  </a>\n                </motion.div>\n              ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      <div className=\"flex items-center gap-2 justify-end\">\n        {isOpen && (\n          <motion.span \n            className=\"bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 text-sm py-1 px-3 rounded-full shadow-md\"\n            initial={{ opacity: 0, x: -10 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -10 }}\n          >\n            {primaryConfig.label}\n          </motion.span>\n        )}\n        <button\n          onClick={toggleOpen}\n          className={`${isOpen ? 'bg-gray-700' : primaryConfig.bgColor} text-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all hover:scale-105 flex items-center justify-center z-10`}\n          aria-label={isOpen ? 'Close menu' : 'Open menu'}\n        >\n          {isOpen ? <X className=\"w-5 h-5\" /> : primaryConfig.icon}\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// components/cta/FooterCTA.tsx\nimport Link from 'next/link';\nimport { Button } from './Button';\nimport { ExternalLink, ArrowRight, CalendarDays, Mail, Linkedin } from 'lucide-react';\n\nexport function FooterCTA() {\n  return (\n    <div className=\"mt-12 pt-8 border-t border-gray-200 dark:border-gray-700\">\n      <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold mb-1\">Connect with Mustafa</h3>\n          <p className=\"text-gray-600 dark:text-gray-300 text-sm max-w-md\">\n            Interested in AI collaboration, entrepreneurship, or discussing potential opportunities? Reach out through any of these channels.\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-3\">\n          <Button\n            variant=\"primary\"\n            size=\"md\"\n            href=\"/early-access\"\n            rightIcon={<ArrowRight className=\"w-4 h-4\" />}\n          >\n            Join Early Access\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"md\"\n            href=\"https://calendly.com/msualp-main\"\n            external={true}\n            rightIcon={<CalendarDays className=\"w-4 h-4\" />}\n          >\n            Schedule Meeting\n          </Button>\n          \n          <Button\n            variant=\"linkedin\"\n            size=\"md\"\n            href=\"https://www.linkedin.com/in/sualp/\"\n            external={true}\n            rightIcon={<Linkedin className=\"w-4 h-4\" />}\n          >\n            Connect on LinkedIn\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"md\"\n            href=\"mailto:msualp@sociail.com\"\n            external={true}\n            rightIcon={<Mail className=\"w-4 h-4\" />}\n          >\n            Email Me\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Usage Examples for different contexts:\n\n// Example 1: Hero section\n/* \n<section className=\"py-20 text-center\">\n  <h1 className=\"text-5xl font-bold mb-6\">Mustafa Sualp</h1>\n  <p className=\"text-xl mb-8 max-w-2xl mx-auto\">\n    Serial entrepreneur, AI enthusiast, and founder of Sociail\n  </p>\n  <CTAGroup \n    variant=\"hero\" \n    primaryCTA=\"earlyAccess\" \n    secondaryCTA=\"calendly\" \n  />\n</section>\n*/\n\n// Example 2: Inline in content\n/*\n<section className=\"my-12\">\n  <h2 className=\"text-2xl font-bold mb-4\">Interested in AI Collaboration?</h2>\n  <p className=\"mb-6\">\n    Learn how Sociail is transforming how teams work with AI.\n  </p>\n  <CTAGroup \n    variant=\"inline\" \n    primaryCTA=\"earlyAccess\" \n    secondaryLabel=\"Schedule a Demo\" \n  />\n</section>\n*/\n\n// Example 3: Early Access specific component\n/*\n<section className=\"my-16\">\n  <h2 className=\"text-3xl font-bold mb-8\">Join the Revolution</h2>\n  <EarlyAccessCTA \n    variant=\"prominent\" \n    showCounter={true} \n  />\n</section>\n*/\n\n// Example 4: Mobile floating action button\n/*\n<FloatingCTA primaryCTA=\"earlyAccess\" />\n*/\n\n// Example 5: Footer with all options\n/*\n<footer className=\"py-12\">\n  <FooterCTA />\n</footer>\n*/"
        }
    ]
}